
configs:
  flink-conf:
    file: ./conf/config.yaml
  postgres_conf:
    file: conf/postgresql.conf
  postgres_hba:
    file: conf/pg_hba.conf

  redis_conf:
    file: conf/redis.conf

  log4j:
    file: ./conf/log4j.properties
  log4j-console:
    file: ./conf/log4j-console.properties
  log4j-session:
    file: ./conf/log4j-session.properties

services:

  # begin Confluent Kafka cluster
  broker:
    image: confluentinc/cp-kafka:7.9.1
    container_name: broker
    hostname: broker
    ports:
      - 9092:9092
      - 9101:9101
    environment:
      KAFKA_NODE_ID: 1001
      KAFKA_LISTENERS: 'PLAINTEXT://broker:29092,CONTROLLER://broker:29193,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1001@broker:29193"
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      # Replace CLUSTER_ID with a unique base64 UUID using "bin/kafka-storage.sh random-uuid" 
      # See https://docs.confluent.io/kafka/operations-tools/kafka-tools.html#kafka-storage-sh
      CLUSTER_ID: ${CLUSTER_ID}
    volumes:
      - ./data/confluent.d/broker/data:/var/lib/kafka/data
      - ./data/confluent.d/broker/log4j:/var/log/kafka

  schema-registry:
    image: confluentinc/cp-schema-registry:7.9.1
    container_name: schema-registry
    hostname: schema-registry
    depends_on:
      - broker
    ports:
      - 9081:9081
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:9081


  control-center:
    image: confluentinc/cp-enterprise-control-center:7.9.1
    container_name: control-center
    hostname: control-center
    depends_on:
      - broker
    ports:
      - 9021:9021     # -> Web UI console
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'connect:8083'
      CONTROL_CENTER_CONNECT_HEALTHCHECK_ENDPOINT: '/connectors'
      CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:9081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021


  connect:
    image: ${REPO_NAME}/kafka-connect-custom:2.1
    container_name: connect
    hostname: connect
    depends_on:
      - broker
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:9081
      # CLASSPATH required due to CC-2422
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-7.6.1.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR

  # end Clonfluent cluster


  # begin Flink cluster
  jobmanager:
#    image: georgelza/apacheflink-base-2.1.0-scala_2.12-java17:1.0.0
    image: georgelza/apacheflink-base-1.20.2-scala_2.12-java17:1.0.0
    hostname: jobmanager
    container_name: jobmanager
    ports:
      - 8084:8081
    environment:
      - ENV_ROOTLOG_LEVEL=DEBUG
      - ENV_FLINKLOG_LEVEL=INFO
    volumes:
      - ./pyFlink:/pyapp

      - ./creFlinkFlows:/sql
      - ./data/flink/logs:/opt/flink/log
      - ./data/flink/checkpoints:/opt/flink/checkpoints
      - ./data/flink/rocksdb:/opt/flink/rocksdb
    configs:
      - source: flink-conf
        target: /opt/flink/conf/config.yaml
      - source: log4j
        target: /opt/flink/conf/log4j.properties
      - source: log4j-console
        target: /opt/flink/conf/log4j-console.properties
      - source: log4j-session
        target: /opt/flink/conf/log4j-session.properties
    command: jobmanager

  taskmanager:
#    image: georgelza/apacheflink-base-2.1.0-scala_2.12-java17:1.0.0
    image: georgelza/apacheflink-base-1.20.2-scala_2.12-java17:1.0.0
    depends_on:
      - jobmanager
    deploy:
      replicas: 2
    environment:
      - ENV_ROOTLOG_LEVEL=DEBUG
      - ENV_FLINKLOG_LEVEL=INFO
    volumes:
      - ./data/flink/logs:/opt/flink/log
      - ./data/flink/checkpoints:/opt/flink/checkpoints
      - ./data/flink/rocksdb:/opt/flink/rocksdb
    configs:
      - source: flink-conf
        target: /opt/flink/conf/config.yaml
      - source: log4j
        target: /opt/flink/conf/log4j.properties
      - source: log4j-console
        target: /opt/flink/conf/log4j-console.properties
      - source: log4j-session
        target: /opt/flink/conf/log4j-session.properties
    command: taskmanager
  # end Flink cluster


 # http://localhost:9001/browser
  minio:
    image: minio/minio:latest
    container_name: minio
    hostname: minio
    ports:
      - 9001:9001  # Web UI console
      - 9000:9000  # api address   
    environment:  
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}          # access.key: mnadmin
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}  # secret.key: mnpassword
      - AWS_REGION=${AWS_REGION}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}

      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_DOMAIN=${MINIO_ALIAS}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_BUCKET=${MINIO_BUCKET}
    volumes:
      - ./data/minio:/data    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 5s
    command: ["server", "/data", "--console-address", ":9001"]


  minio-client:
    image: minio/mc:latest
    container_name: mc
    hostname: mc
    depends_on:
      minio:
        condition: 
          service_healthy    
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}

      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_DOMAIN=${MINIO_ALIAS}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_BUCKET=${MINIO_BUCKET}
    entrypoint: >
      /bin/sh -c "
      until (mc alias set ${MINIO_ALIAS} ${MINIO_ENDPOINT} ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD}) do echo '...waiting...' && sleep 1; done;
      mc rm -r --force ${MINIO_ALIAS}/${MINIO_BUCKET};
      mc mb ${MINIO_ALIAS}/${MINIO_BUCKET};
      mc anonymous set public ${MINIO_ALIAS}/${MINIO_BUCKET};
      tail -f /dev/null
      "


  # Will act as a destination database for our app data created 
  # and additionally store our paimon catalog via the jdbc connection. 
  postgrescat:
    image: ${REPO_NAME}/postgres-12.0:1.0.0
    container_name: ${POSTGRES_CAT_HOST}
    hostname: ${POSTGRES_CAT_HOST}
    restart: unless-stopped
    ports:
      - ${POSTGRES_CAT_PORT}:5432
    environment:
      - POSTGRES_DB=${POSTGRES_CAT_DB}
      - POSTGRES_USER=${POSTGRES_CAT_USER}
      - POSTGRES_PASSWORD=${POSTGRES_CAT_PASSWORD}
    healthcheck:
      test: ["CMD", "psql", "-U", "${POSTGRES_CAT_USER}", "${POSTGRES_CAT_DB}"]
    volumes:
      - ./data/${POSTGRES_CAT_HOST}:/var/lib/postgresql/data
      - ./sql/${POSTGRES_CAT_HOST}:/docker-entrypoint-initdb.d
    configs:
      - source: postgres_conf
        target: /etc/postgresql/postgresql.conf
      - source: postgres_hba
        target: /etc/postgresql/data/pg_hba.conf
    command: -c config_file=/etc/postgresql/postgresql.conf


  postgrescdc:
    image: ${REPO_NAME}/postgres-12.0:1.0.0
    container_name: ${POSTGRES_CDC_HOST}
    hostname: ${POSTGRES_CDC_HOST}
    restart: unless-stopped
    ports:
      - ${POSTGRES_CDC_PORT}:5432
    environment:
      - POSTGRES_DB=${POSTGRES_CDC_DB}
      - POSTGRES_USER=${POSTGRES_CDC_USER}
      - POSTGRES_PASSWORD=${POSTGRES_CDC_PASSWORD}
    healthcheck:
      test: ["CMD", "psql", "-U", "${POSTGRES_CDC_USER}", "${POSTGRES_CDC_DB}"]
    volumes:
      - ./data/${POSTGRES_CDC_HOST}:/var/lib/postgresql/data
      - ./sql/${POSTGRES_CDC_HOST}:/docker-entrypoint-initdb.d
    configs:
      - source: postgres_conf
        target: /etc/postgresql/postgresql.conf
      - source: postgres_hba
        target: /etc/postgresql/data/pg_hba.conf
    command: -c config_file=/etc/postgresql/postgresql.conf


  # Output
  neo4j:
    container_name: neo4j
    hostname: neo4j
    image: neo4j:latest
    ports:
      - 7474:7474       # Console/Web Interface
      - 7687:7687
    environment:
      - NEO4J_AUTH=${NEO4J_USERNAME}/${NEO4J_PASSWORD}
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
    volumes:
      - ./data/neo4j_db/data:/data
      - ./data/neo4j_db/logs:/logs
      - ./data/neo4j_db/plugins:/plugins
      - ./data/neo4j_data:/var/lib/neo4j/import
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://neo4j:7474 || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Used to test the local Kafka Connector/sinks into MongoDB or direct insert into MongoDB Collection.
  mongodb:
    image: mongodb/mongodb-atlas-local:latest
    hostname: mongodb
    container_name: mongodb
    ports:
      - 27017:27017
    environment:
      MONGO_USERNAME: ${MONGO_USERNAME}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
    volumes:
      - ./data/mongodb:/data/db


  redis:
    image: redis:8.0-bookworm
    container_name: redis
    hostname: redis
    restart: always
    ports:
      - ${REDIS_PORT}:6379
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=${REDIS_DB}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s # Optional: delay before first health check
    volumes:
      - ./data/redis:/data
    configs:
      - source: redis_conf
        target: /usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf

# Without a network explicitly defined, you hit this Hive/Thrift error
# java.net.URISyntaxException Illegal character in hostname
# https://github.com/TrivadisPF/platys-modern-data-platform/issues/231
networks:
  default:
    name: ${COMPOSE_PROJECT_NAME}