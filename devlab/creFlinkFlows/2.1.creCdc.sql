
# CDC Based
CREATE OR REPLACE TABLE postgres_catalog.inbound.children (
     id                 BIGINT
    ,nationalid         VARCHAR(14) -- NOT NULL
    ,data               STRING
    ,created_at         TIMESTAMP_LTZ(3)
    ,WATERMARK          FOR created_at AS created_at - INTERVAL '15' SECOND
    ,PRIMARY KEY (nationalid) NOT ENFORCED
) WITH (
     'connector'                           = 'postgres-cdc'
    ,'hostname'                            = 'postgrescdc'
    ,'port'                                = '5432'
    ,'username'                            = 'dbadmin'
    ,'password'                            = 'dbpassword'
    ,'database-name'                       = 'demog'
    ,'schema-name'                         = 'public'
    ,'table-name'                          = 'children'
    ,'slot.name'                           = 'children0'
    -- experimental feature: incremental snapshot (default off)
    ,'scan.incremental.snapshot.enabled'   = 'true'               -- experimental feature: incremental snapshot (default off)
    ,'scan.startup.mode'                   = 'initial'            -- https://nightlies.apache.org/flink/flink-cdc-docs-release-3.1/docs/connectors/flink-sources/postgres-cdc/#startup-reading-position     ,'decoding.plugin.name'                = 'pgoutput'
    ,'decoding.plugin.name'                = 'pgoutput'
);


CREATE OR REPLACE TABLE postgres_catalog.inbound.adults (
     id                 BIGINT
    ,nationalid         VARCHAR(14) -- NOT NULL
    ,data               STRING
    ,created_at         TIMESTAMP_LTZ(3)
    ,WATERMARK          FOR created_at AS created_at - INTERVAL '15' SECOND
    ,PRIMARY KEY (nationalid) NOT ENFORCED
) WITH (
     'connector'                           = 'postgres-cdc'
    ,'hostname'                            = 'postgrescdc'
    ,'port'                                = '5432'
    ,'username'                            = 'dbadmin'
    ,'password'                            = 'dbpassword'
    ,'database-name'                       = 'demog'
    ,'schema-name'                         = 'public'
    ,'table-name'                          = 'adults'
    ,'slot.name'                           = 'adults0'
    -- experimental feature: incremental snapshot (default off)
    ,'scan.incremental.snapshot.enabled'   = 'true'               -- experimental feature: incremental snapshot (default off)
    ,'scan.startup.mode'                   = 'initial'            -- https://nightlies.apache.org/flink/flink-cdc-docs-release-3.1/docs/connectors/flink-sources/postgres-cdc/#startup-reading-position     ,'decoding.plugin.name'                = 'pgoutput'
    ,'decoding.plugin.name'                = 'pgoutput'
);

################################################################################################################################################

# All via Kafka Topics
#

CREATE OR REPLACE TABLE kafka_catalog.inbound.children (
     _id                VARCHAR(32)                              -- UUID generated by app, inside 'data' / json payload
    ,name               VARCHAR(20)
    ,surname            VARCHAR(20)
    ,gender             VARCHAR(10)
    ,dob                VARCHAR(10)
    ,nationalid         VARCHAR(20)
    ,father_nationalid  VARCHAR(20)
    ,mother_nationalid  VARCHAR(20)
    ,address            ROW<
         parcel_id          VARCHAR(20)
        ,street_1           VARCHAR(200)
        ,street_2           VARCHAR(200)
        ,neighbourhood      VARCHAR(100)
        ,town               VARCHAR(100)
        ,county             VARCHAR(100)
        ,province           VARCHAR(100)
        ,country            VARCHAR(100)
        ,postal_code        VARCHAR(20)
        ,country_code       VARCHAR(5)
    >
    ,family_id          VARCHAR(32)
) WITH (
    'connector'                             = 'kafka',
    'topic'                                 = 'children',
    'properties.bootstrap.servers'          = 'broker:29092',
    'properties.group.id'                   = 'devlab_children',
    'scan.startup.mode'                     = 'earliest-offset',
    'format'                                = 'json',
    'json.fail-on-missing-field'            = 'false',
    'json.ignore-parse-errors'              = 'true'
);

################################################################################################################################################

CREATE OR REPLACE TABLE kafka_catalog.inbound.adults (
     _id                    VARCHAR(32)
    ,name                   VARCHAR(100)
    ,surname                VARCHAR(100)
    ,nationalid             VARCHAR(14)
    ,gender                 VARCHAR(1)
    ,dob                    VARCHAR(10)
    ,marital_status         VARCHAR(20)
    ,partner                VARCHAR(14)             -- nationalid if of partner/wife
    ,status                 VARCHAR(20)
    ,account        ARRAY<ROW<
         fspiAgentAccountId VARCHAR(20)
        ,accountId          VARCHAR(20)
        ,fspiId             VARCHAR(20)
        ,memberName         VARCHAR(100)
        ,accountType        VARCHAR(20)
        ,fspiAgentId        VARCHAR(20)
        ,expDate            VARCHAR(6)
        ,cardHolder         VARCHAR(20)
        ,cardNumber         VARCHAR(20)
        ,cardNetwork        VARCHAR(20)
        ,issuingBank        VARCHAR(100)
    >>
    ,address            ROW<
         parcel_id          VARCHAR(20)
        ,street_1           VARCHAR(200)
        ,street_2           VARCHAR(200)
        ,neighbourhood      VARCHAR(100)
        ,town               VARCHAR(100)
        ,county             VARCHAR(100)
        ,province           VARCHAR(100)
        ,country            VARCHAR(100)
        ,postal_code        VARCHAR(20)
        ,country_code       VARCHAR(5)
    >
) WITH (
    'connector'                             = 'kafka',
    'topic'                                 = 'adults',
    'properties.bootstrap.servers'          = 'broker:29092',
    'properties.group.id'                   = 'devlab_adults',
    'scan.startup.mode'                     = 'earliest-offset',
    'format'                                = 'json',
    'json.fail-on-missing-field'            = 'false',
    'json.ignore-parse-errors'              = 'true'
);

################################################################################################################################################

CREATE OR REPLACE TABLE kafka_catalog.inbound.families (
     _id                VARCHAR(32)                     -- UUID, valaue is contained inside the data colume from source
    ,husband            ROW<
         name                   VARCHAR(100)
        ,surname                VARCHAR(100)
        ,nationalid             VARCHAR(14)
        ,gender                 VARCHAR(1)
        ,dob                    VARCHAR(10)
        ,marital_status         VARCHAR(20)
        ,partner                VARCHAR(14)             -- nationalid if of partner/wife
        ,status                 VARCHAR(20)
        ,account        ARRAY<ROW<
             fspiAgentAccountId VARCHAR(20)
            ,accountId          VARCHAR(20)
            ,fspiId             VARCHAR(20)
            ,memberName         VARCHAR(100)
            ,accountType        VARCHAR(20)
            ,fspiAgentId        VARCHAR(20)
            ,expDate            VARCHAR(6)
            ,cardHolder         VARCHAR(20)
            ,cardNumber         VARCHAR(20)
            ,cardNetwork        VARCHAR(20)
            ,issuingBank        VARCHAR(100)
        >>
    >
    ,wife               ROW<
         name                   VARCHAR(100)
        ,surname                VARCHAR(100)
        ,nationalid             VARCHAR(14)
        ,gender                 VARCHAR(1)
        ,dob                    VARCHAR(10)
        ,marital_status         VARCHAR(20)
        ,partner                VARCHAR(14)             -- nationalid if of partner/husband
        ,status                 VARCHAR(20)
        ,account        ARRAY<ROW<
             fspiAgentAccountId  VARCHAR(20)
            ,accountId           VARCHAR(20)
            ,fspiId              VARCHAR(20)
            ,memberName          VARCHAR(100)
            ,accountType         VARCHAR(20)
            ,fspiAgentId         VARCHAR(20)
            ,expDate             VARCHAR(6)
            ,cardHolder          VARCHAR(20)
            ,cardNumber          VARCHAR(20)
            ,cardNetwork         VARCHAR(20)
            ,issuingBank         VARCHAR(100)
        >>
    >
    ,address            ROW <
         parcel_id              VARCHAR(20)
        ,street_1               VARCHAR(200)
        ,street_2               VARCHAR(200)
        ,neighbourhood          VARCHAR(100)
        ,town                   VARCHAR(100)
        ,county                 VARCHAR(100)
        ,province               VARCHAR(100)
        ,country                VARCHAR(100)
        ,postal_code            VARCHAR(20)
        ,country_code           VARCHAR(5)
    >
    ,children           ARRAY<ROW<
         name                   VARCHAR(100)
        ,surname                VARCHAR(100)
        ,gender                 VARCHAR(1)
        ,dob                    VARCHAR(10)
        ,nationalid             VARCHAR(14)
        ,father_nationalid      VARCHAR(14)             -- nationalid if of father
        ,mother_nationalid      VARCHAR(14)             -- nationalid if of father
    >>
) WITH (
    'connector'                             = 'kafka',
    'topic'                                 = 'families',
    'properties.bootstrap.servers'          = 'broker:29092',
    'properties.group.id'                   = 'devlab_families',
    'scan.startup.mode'                     = 'earliest-offset',
    'format'                                = 'json',
    'json.fail-on-missing-field'            = 'false',
    'json.ignore-parse-errors'              = 'true'
);

################################################################################################################################################


-- now see 2.1.creTarget.sql
